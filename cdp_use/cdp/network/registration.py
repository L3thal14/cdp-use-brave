# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Network Domain Event Registration"""

from typing import Callable, Optional, Protocol

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..registry import EventRegistry
    from .events import *

class NetworkRegistration:
    """Event registration interface for Network domain."""

    def __init__(self, registry: 'EventRegistry'):
        self._registry = registry
        self._domain = "Network"

    def data_received(
        self,
        callback: Callable[['DataReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for dataReceived events.
        
        Fired when data chunk was received over the network.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.dataReceived", callback)

    def event_source_message_received(
        self,
        callback: Callable[['EventSourceMessageReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for eventSourceMessageReceived events.
        
        Fired when EventSource message is received.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.eventSourceMessageReceived", callback)

    def loading_failed(
        self,
        callback: Callable[['LoadingFailedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for loadingFailed events.
        
        Fired when HTTP request has failed to load.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.loadingFailed", callback)

    def loading_finished(
        self,
        callback: Callable[['LoadingFinishedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for loadingFinished events.
        
        Fired when HTTP request has finished loading.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.loadingFinished", callback)

    def request_intercepted(
        self,
        callback: Callable[['RequestInterceptedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for requestIntercepted events.
        
        Details of an intercepted HTTP request, which must be either allowed, blocked, modified or
mocked.
Deprecated, use Fetch.requestPaused instead.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.requestIntercepted", callback)

    def request_served_from_cache(
        self,
        callback: Callable[['RequestServedFromCacheEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for requestServedFromCache events.
        
        Fired if request ended up loading from cache.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.requestServedFromCache", callback)

    def request_will_be_sent(
        self,
        callback: Callable[['RequestWillBeSentEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for requestWillBeSent events.
        
        Fired when page is about to send HTTP request.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.requestWillBeSent", callback)

    def resource_changed_priority(
        self,
        callback: Callable[['ResourceChangedPriorityEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for resourceChangedPriority events.
        
        Fired when resource loading priority is changed
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.resourceChangedPriority", callback)

    def signed_exchange_received(
        self,
        callback: Callable[['SignedExchangeReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for signedExchangeReceived events.
        
        Fired when a signed exchange was received over the network
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.signedExchangeReceived", callback)

    def response_received(
        self,
        callback: Callable[['ResponseReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for responseReceived events.
        
        Fired when HTTP response is available.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.responseReceived", callback)

    def web_socket_closed(
        self,
        callback: Callable[['WebSocketClosedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketClosed events.
        
        Fired when WebSocket is closed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketClosed", callback)

    def web_socket_created(
        self,
        callback: Callable[['WebSocketCreatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketCreated events.
        
        Fired upon WebSocket creation.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketCreated", callback)

    def web_socket_frame_error(
        self,
        callback: Callable[['WebSocketFrameErrorEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketFrameError events.
        
        Fired when WebSocket message error occurs.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketFrameError", callback)

    def web_socket_frame_received(
        self,
        callback: Callable[['WebSocketFrameReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketFrameReceived events.
        
        Fired when WebSocket message is received.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketFrameReceived", callback)

    def web_socket_frame_sent(
        self,
        callback: Callable[['WebSocketFrameSentEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketFrameSent events.
        
        Fired when WebSocket message is sent.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketFrameSent", callback)

    def web_socket_handshake_response_received(
        self,
        callback: Callable[['WebSocketHandshakeResponseReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketHandshakeResponseReceived events.
        
        Fired when WebSocket handshake response becomes available.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketHandshakeResponseReceived", callback)

    def web_socket_will_send_handshake_request(
        self,
        callback: Callable[['WebSocketWillSendHandshakeRequestEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webSocketWillSendHandshakeRequest events.
        
        Fired when WebSocket is about to initiate handshake.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webSocketWillSendHandshakeRequest", callback)

    def web_transport_created(
        self,
        callback: Callable[['WebTransportCreatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webTransportCreated events.
        
        Fired upon WebTransport creation.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webTransportCreated", callback)

    def web_transport_connection_established(
        self,
        callback: Callable[['WebTransportConnectionEstablishedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webTransportConnectionEstablished events.
        
        Fired when WebTransport handshake is finished.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webTransportConnectionEstablished", callback)

    def web_transport_closed(
        self,
        callback: Callable[['WebTransportClosedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for webTransportClosed events.
        
        Fired when WebTransport is disposed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.webTransportClosed", callback)

    def direct_tcp_socket_created(
        self,
        callback: Callable[['DirectTCPSocketCreatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketCreated events.
        
        Fired upon direct_socket.TCPSocket creation.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketCreated", callback)

    def direct_tcp_socket_opened(
        self,
        callback: Callable[['DirectTCPSocketOpenedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketOpened events.
        
        Fired when direct_socket.TCPSocket connection is opened.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketOpened", callback)

    def direct_tcp_socket_aborted(
        self,
        callback: Callable[['DirectTCPSocketAbortedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketAborted events.
        
        Fired when direct_socket.TCPSocket is aborted.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketAborted", callback)

    def direct_tcp_socket_closed(
        self,
        callback: Callable[['DirectTCPSocketClosedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketClosed events.
        
        Fired when direct_socket.TCPSocket is closed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketClosed", callback)

    def direct_tcp_socket_chunk_sent(
        self,
        callback: Callable[['DirectTCPSocketChunkSentEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketChunkSent events.
        
        Fired when data is sent to tcp direct socket stream.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketChunkSent", callback)

    def direct_tcp_socket_chunk_received(
        self,
        callback: Callable[['DirectTCPSocketChunkReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directTCPSocketChunkReceived events.
        
        Fired when data is received from tcp direct socket stream.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directTCPSocketChunkReceived", callback)

    def direct_udp_socket_created(
        self,
        callback: Callable[['DirectUDPSocketCreatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketCreated events.
        
        Fired upon direct_socket.UDPSocket creation.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketCreated", callback)

    def direct_udp_socket_opened(
        self,
        callback: Callable[['DirectUDPSocketOpenedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketOpened events.
        
        Fired when direct_socket.UDPSocket connection is opened.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketOpened", callback)

    def direct_udp_socket_aborted(
        self,
        callback: Callable[['DirectUDPSocketAbortedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketAborted events.
        
        Fired when direct_socket.UDPSocket is aborted.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketAborted", callback)

    def direct_udp_socket_closed(
        self,
        callback: Callable[['DirectUDPSocketClosedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketClosed events.
        
        Fired when direct_socket.UDPSocket is closed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketClosed", callback)

    def direct_udp_socket_chunk_sent(
        self,
        callback: Callable[['DirectUDPSocketChunkSentEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketChunkSent events.
        
        Fired when message is sent to udp direct socket stream.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketChunkSent", callback)

    def direct_udp_socket_chunk_received(
        self,
        callback: Callable[['DirectUDPSocketChunkReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for directUDPSocketChunkReceived events.
        
        Fired when message is received from udp direct socket stream.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.directUDPSocketChunkReceived", callback)

    def request_will_be_sent_extra_info(
        self,
        callback: Callable[['RequestWillBeSentExtraInfoEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for requestWillBeSentExtraInfo events.
        
        Fired when additional information about a requestWillBeSent event is available from the
network stack. Not every requestWillBeSent event will have an additional
requestWillBeSentExtraInfo fired for it, and there is no guarantee whether requestWillBeSent
or requestWillBeSentExtraInfo will be fired first for the same request.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.requestWillBeSentExtraInfo", callback)

    def response_received_extra_info(
        self,
        callback: Callable[['ResponseReceivedExtraInfoEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for responseReceivedExtraInfo events.
        
        Fired when additional information about a responseReceived event is available from the network
stack. Not every responseReceived event will have an additional responseReceivedExtraInfo for
it, and responseReceivedExtraInfo may be fired before or after responseReceived.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.responseReceivedExtraInfo", callback)

    def response_received_early_hints(
        self,
        callback: Callable[['ResponseReceivedEarlyHintsEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for responseReceivedEarlyHints events.
        
        Fired when 103 Early Hints headers is received in addition to the common response.
Not every responseReceived event will have an responseReceivedEarlyHints fired.
Only one responseReceivedEarlyHints may be fired for eached responseReceived event.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.responseReceivedEarlyHints", callback)

    def trust_token_operation_done(
        self,
        callback: Callable[['TrustTokenOperationDoneEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for trustTokenOperationDone events.
        
        Fired exactly once for each Trust Token operation. Depending on
the type of the operation and whether the operation succeeded or
failed, the event is fired before the corresponding request was sent
or after the response was received.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.trustTokenOperationDone", callback)

    def policy_updated(
        self,
        callback: Callable[['PolicyUpdatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for policyUpdated events.
        
        Fired once security policy has been updated.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.policyUpdated", callback)

    def subresource_web_bundle_metadata_received(
        self,
        callback: Callable[['SubresourceWebBundleMetadataReceivedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for subresourceWebBundleMetadataReceived events.
        
        Fired once when parsing the .wbn file has succeeded.
The event contains the information about the web bundle contents.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.subresourceWebBundleMetadataReceived", callback)

    def subresource_web_bundle_metadata_error(
        self,
        callback: Callable[['SubresourceWebBundleMetadataErrorEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for subresourceWebBundleMetadataError events.
        
        Fired once when parsing the .wbn file has failed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.subresourceWebBundleMetadataError", callback)

    def subresource_web_bundle_inner_response_parsed(
        self,
        callback: Callable[['SubresourceWebBundleInnerResponseParsedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for subresourceWebBundleInnerResponseParsed events.
        
        Fired when handling requests for resources within a .wbn file.
Note: this will only be fired for resources that are requested by the webpage.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.subresourceWebBundleInnerResponseParsed", callback)

    def subresource_web_bundle_inner_response_error(
        self,
        callback: Callable[['SubresourceWebBundleInnerResponseErrorEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for subresourceWebBundleInnerResponseError events.
        
        Fired when request for resources within a .wbn file failed.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.subresourceWebBundleInnerResponseError", callback)

    def reporting_api_report_added(
        self,
        callback: Callable[['ReportingApiReportAddedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for reportingApiReportAdded events.
        
        Is sent whenever a new report is added.
And after 'enableReportingApi' for all existing reports.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.reportingApiReportAdded", callback)

    def reporting_api_report_updated(
        self,
        callback: Callable[['ReportingApiReportUpdatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for reportingApiReportUpdated events.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.reportingApiReportUpdated", callback)

    def reporting_api_endpoints_changed_for_origin(
        self,
        callback: Callable[['ReportingApiEndpointsChangedForOriginEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for reportingApiEndpointsChangedForOrigin events.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Network.reportingApiEndpointsChangedForOrigin", callback)

