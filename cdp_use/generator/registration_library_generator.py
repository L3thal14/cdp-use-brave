"""
Registration library generator for CDP client registration interface.

Generates the main registration library that provides the `cdp_client.register.Domain.method()` interface.
"""

from typing import Any, Dict, List


class RegistrationLibraryGenerator:
    """Generates the main registration library."""

    def __init__(self):
        self.domain_registrations = []

    def generate_main_registration_library(self, domains: List[Dict[str, Any]]) -> str:
        """Generate the main registration library file."""
        # Clear previous domain registrations
        self.domain_registrations.clear()

        # Collect domain info
        for domain in domains:
            domain_name = domain["domain"]
            domain_lower = domain_name.lower()
            registration_class_name = f"{domain_name}Registration"
            
            # Only include domains that have events
            events = domain.get("events", [])
            if events:
                self.domain_registrations.append(
                    {
                        "name": domain_name,
                        "class_name": registration_class_name,
                        "lower_name": domain_lower,
                    }
                )

        # Build the main registration library file
        content = self.build_main_registration_library_file()
        return content

    def build_main_registration_library_file(self) -> str:
        """Build the main registration library file."""
        # Start with auto-generated header
        content = """# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""
        content += '"""CDP Event Registration Library"""\n\n'

        # Basic imports
        content += "from typing import TYPE_CHECKING\n\n"

        # TYPE_CHECKING section for EventRegistry and domain registrations
        content += "if TYPE_CHECKING:\n"
        content += "    from .registry import EventRegistry\n"
        for domain_info in self.domain_registrations:
            domain_lower = domain_info["lower_name"]
            registration_class_name = domain_info["class_name"]
            content += f"    from .{domain_lower}.registration import {registration_class_name}\n"
        content += "\n"

        # Generate main registration library class
        content += "class CDPRegistrationLibrary:\n"
        content += '    """Main CDP registration library with domain-specific registration interfaces."""\n\n'
        content += "    def __init__(self, registry: 'EventRegistry'):\n"
        content += "        self._registry = registry\n"

        # Add properties for each domain registration (lazy imports to avoid circular dependencies)
        for domain_info in self.domain_registrations:
            domain_name = domain_info["name"]
            domain_lower = domain_info["lower_name"]
            registration_class_name = domain_info["class_name"]

            content += f"\n        # {domain_name} domain registration\n"
            content += (
                f"        from .{domain_lower}.registration import {registration_class_name}\n"
            )
            content += f"        self.{domain_name} = {registration_class_name}(registry)\n"

        content += "\n"

        return content