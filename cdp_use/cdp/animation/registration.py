# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Animation Domain Event Registration"""

from typing import Callable, Optional, Protocol

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..registry import EventRegistry
    from .events import *

class AnimationRegistration:
    """Event registration interface for Animation domain."""

    def __init__(self, registry: 'EventRegistry'):
        self._registry = registry
        self._domain = "Animation"

    def animation_canceled(
        self,
        callback: Callable[['AnimationCanceledEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for animationCanceled events.
        
        Event for when an animation has been cancelled.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Animation.animationCanceled", callback)

    def animation_created(
        self,
        callback: Callable[['AnimationCreatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for animationCreated events.
        
        Event for each animation that has been created.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Animation.animationCreated", callback)

    def animation_started(
        self,
        callback: Callable[['AnimationStartedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for animationStarted events.
        
        Event for animation that has been started.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Animation.animationStarted", callback)

    def animation_updated(
        self,
        callback: Callable[['AnimationUpdatedEvent', Optional[str]], None],
    ) -> None:
        """
        Register a callback for animationUpdated events.
        
        Event for animation that has been updated.
        
        Args:
            callback: Function to call when event occurs.
                     Receives (event_data, session_id) as parameters.
        """
        self._registry.register("Animation.animationUpdated", callback)

